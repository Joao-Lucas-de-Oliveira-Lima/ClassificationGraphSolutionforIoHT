# -*- coding: utf-8 -*-
"""ANN_to_Classification_Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VOmeLwDI4mFjFJmvQUhcXXdkbqEE4NMf

**Import Important Libraries**
"""


import pandas as pd
import numpy as np 
import scipy
from six.moves import urllib
from scipy import stats ##statistic functions
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
import subprocess
import os
import platform

#####################################################################################################################


def trainDecisionTreeModelAccGyr(threshold, testMin, testMax, preprocessingData):
    
    print("===ACC Decision Tree===")
    labelTrain, labelTest, MyNewDataSetTrain, MyNewDataSetTest = preprocessingData
    
    from sklearn import tree
    X, y = MyNewDataSetTrain, labelTrain
    
    cont = 0
    valueAccuracy = 0
    resultModel = None
    while cont < testMin or (valueAccuracy < threshold and cont < testMax) :
        clf = tree.DecisionTreeClassifier()
        clf = clf.fit(X, y)
        tree.plot_tree(clf)

        result = []
        for mndst in  MyNewDataSetTest:
          result.append(clf.predict([mndst]))

        qtd = 0
        for i in range(len(labelTest)):
          if result[i] == labelTest[i]:
            qtd += 1
        
        if valueAccuracy < qtd/len(labelTest):
            valueAccuracy = qtd/len(labelTest)
            resultModel = clf
        cont+=1
   
    print(round(valueAccuracy,2))
    
    print("==== Deision Tree Model Save ====")
    # Specify an initial type for the model ( similar to input shape for the model )
    initial_type = [ 
        ( 'input_study_hours' , FloatTensorType( [None,1] ) ) 
    ]

    # Write the ONNX model to disk
    converted_model = convert_sklearn(resultModel , initial_types=initial_type )
    with open( "sklearn_model_dt.onnx", "wb" ) as f:
        f.write( converted_model.SerializeToString() )

    
    cmd = ['python', '-m', 'onnxruntime.tools.convert_onnx_models_to_ort', 'sklearn_model_dt.onnx']
    shell_cmd = subprocess.run((cmd), capture_output=True, text=True)
    command_output=(shell_cmd.stdout)
    
    so = platform.system()
    if so == "Windows":
        os.system('copy sklearn_model_dt.onnx .\\saved_model\\')
        os.system('del sklearn_model_dt.onnx')
    if so == "Linux":
        os.system('mv sklearn_model_dt.onnx saved_model')
        
    print(valueAccuracy)
    return [resultModel,valueAccuracy]

def trainRandomForestModelAccGyr(threshold, testMin, testMax, preprocessingData):
    
    print("===ACC Random Forest===")
    
    labelTrain, labelTest, MyNewDataSetTrain, MyNewDataSetTest = preprocessingData
    
    from sklearn.ensemble import RandomForestClassifier
    from sklearn import tree
    X, y = MyNewDataSetTrain, labelTrain
    
    cont = 0
    valueAccuracy = 0
    resultModel = None
    while cont < testMin or (valueAccuracy < threshold and cont < testMax):
        clf = RandomForestClassifier(max_depth=11, random_state=0)
        clf = clf.fit(X, y)

        result = []
        for mndst in  MyNewDataSetTest:
          result.append(clf.predict([mndst]))

        qtd = 0
        for i in range(len(labelTest)):
          if result[i] == labelTest[i]:
            qtd += 1
            
        if valueAccuracy < qtd/len(labelTest):
            valueAccuracy = qtd/len(labelTest)
            resultModel = clf
        cont+=1
    
    print(round(valueAccuracy,2))

    print("==== Random Forest Model Save ====")
    # Specify an initial type for the model ( similar to input shape for the model )
    initial_type = [ 
        ( 'input_study_hours' , FloatTensorType( [None,1] ) ) 
    ]

    # Write the ONNX model to disk
    converted_model = convert_sklearn( resultModel , initial_types=initial_type )
    with open( "sklearn_model_rf.onnx", "wb" ) as f:
        f.write( converted_model.SerializeToString() )

    
    cmd = ['python', '-m', 'onnxruntime.tools.convert_onnx_models_to_ort', 'sklearn_model_rf.onnx']
    shell_cmd = subprocess.run((cmd), capture_output=True, text=True)
    command_output=(shell_cmd.stdout)
    
    so = platform.system()
    if so == "Windows":
        os.system('copy sklearn_model_rf.onnx .\\saved_model\\')
        os.system('del sklearn_model_rf.onnx')
    if so == "Linux":
        os.system('mv sklearn_model_rf.onnx saved_model')
        
    return [resultModel,valueAccuracy]

def trainDecisionTreeModelAcc(threshold, testMin, testMax, preprocessingData):
    
    print("===ACC Decision Tree===")
    labelTrain, labelTest, MyNewDataSetTrain, MyNewDataSetTest = preprocessingData
    
    from sklearn import tree
    X, y = MyNewDataSetTrain, labelTrain
    
    cont = 0
    valueAccuracy = 0
    resultModel = None
    while cont < testMin or (valueAccuracy < threshold and cont < testMax) :
        clf = tree.DecisionTreeClassifier()
        clf = clf.fit(X, y)
        tree.plot_tree(clf)

        result = []
        for mndst in  MyNewDataSetTest:
          result.append(clf.predict([mndst]))

        qtd = 0
        for i in range(len(labelTest)):
          if result[i] == labelTest[i]:
            qtd += 1
        
        if valueAccuracy < qtd/len(labelTest):
            valueAccuracy = qtd/len(labelTest)
            resultModel = clf
        cont+=1
   
    print(round(valueAccuracy,2))
    
    print("==== Deision Tree Model Save ====")
    # Specify an initial type for the model ( similar to input shape for the model )
    initial_type = [ 
        ( 'input_study_hours' , FloatTensorType( [None,1] ) ) 
    ]

    # Write the ONNX model to disk
    converted_model = convert_sklearn(resultModel , initial_types=initial_type )
    with open( "sklearn_model_dt2.onnx", "wb" ) as f:
        f.write( converted_model.SerializeToString() )

    
    cmd = ['python', '-m', 'onnxruntime.tools.convert_onnx_models_to_ort', 'sklearn_model_dt2.onnx']
    shell_cmd = subprocess.run((cmd), capture_output=True, text=True)
    command_output=(shell_cmd.stdout)
    
    so = platform.system()
    if so == "Windows":
        os.system('copy sklearn_model_dt2.onnx .\\saved_model\\')
        os.system('del sklearn_model_dt2.onnx')
    if so == "Linux":
        os.system('mv sklearn_model_dt2.onnx saved_model')
        
    print(valueAccuracy)
    return [resultModel,valueAccuracy]

def trainRandomForestModelAcc(threshold, testMin, testMax, preprocessingData):
    
    print("===ACC Random Forest===")
    
    labelTrain, labelTest, MyNewDataSetTrain, MyNewDataSetTest = preprocessingData
    
    from sklearn.ensemble import RandomForestClassifier
    from sklearn import tree
    X, y = MyNewDataSetTrain, labelTrain
    
    cont = 0
    valueAccuracy = 0
    resultModel = None
    while cont < testMin or (valueAccuracy < threshold and cont < testMax):
        clf = RandomForestClassifier(max_depth=11, random_state=0)
        clf = clf.fit(X, y)

        result = []
        for mndst in  MyNewDataSetTest:
          result.append(clf.predict([mndst]))

        qtd = 0
        for i in range(len(labelTest)):
          if result[i] == labelTest[i]:
            qtd += 1
            
        if valueAccuracy < qtd/len(labelTest):
            valueAccuracy = qtd/len(labelTest)
            resultModel = clf
        cont+=1
    
    print(round(valueAccuracy,2))

    print("==== Random Forest Model Save ====")
    # Specify an initial type for the model ( similar to input shape for the model )
    initial_type = [ 
        ( 'input_study_hours' , FloatTensorType( [None,1] ) ) 
    ]

    # Write the ONNX model to disk
    converted_model = convert_sklearn( resultModel , initial_types=initial_type )
    with open( "sklearn_model_rf2.onnx", "wb" ) as f:
        f.write( converted_model.SerializeToString() )

    
    cmd = ['python', '-m', 'onnxruntime.tools.convert_onnx_models_to_ort', 'sklearn_model_rf2.onnx']
    shell_cmd = subprocess.run((cmd), capture_output=True, text=True)
    command_output=(shell_cmd.stdout)
    
    so = platform.system()
    if so == "Windows":
        os.system('copy sklearn_model_rf2.onnx .\\saved_model\\')
        os.system('del sklearn_model_rf2.onnx')
    if so == "Linux":
        os.system('mv sklearn_model_rf2.onnx saved_model')
        
    return [resultModel,valueAccuracy]
    
if __name__ == '__main__':
    from Dataset1 import Dataset1
    from Dataset2 import Dataset2
    from DatasetACC import DatasetACC
    from DatasetACC_GYR import DatasetACC_GYR
    print("====Preprocessing====")
    dt1 = Dataset1("Datasets/Dataset1")
    dt2 = Dataset2("Datasets/D2_ADL_Dataset/HMP_Dataset/All_data")
    dtACC = DatasetACC([dt1,dt2])
    dtACCGYR = DatasetACC_GYR([dt1])
    ppDataACC = dtACC.executePreprocessing()
    ppDataACCGYR = dtACCGYR.executePreprocessing()
    print("====Training====")
    trainDecisionTreeModelAccGyr(0.7, 10, 1000, ppDataACCGYR)
    trainRandomForestModelAccGyr(0.7, 10, 1000, ppDataACCGYR)
    trainDecisionTreeModelAcc(0.7, 10, 1000, ppDataACC)
    trainRandomForestModelAcc(0.7, 10, 1000, ppDataACC)
   